Grammar

    0 $accept: programa $end

    1 programa: inicio

    2 inicio: decvar inicio
    3       | decfunc inicio
    4       | /* empty */

    5 decvar: LET IDENTIFIER loopatrib ENDEXPRESSION

    6 loopatrib: ASSIGN exp
    7          | /* empty */

    8 decfunc: DEF IDENTIFIER OPENPAR paramlist CLOSEPAR bloco

    9 paramlist: IDENTIFIER looparams
   10          | /* empty */

   11 looparams: SEPARADOR IDENTIFIER looparams
   12          | /* empty */

   13 bloco: OPENBLOCK loopdecvar loopstmts CLOSEBLOCK

   14 loopdecvar: decvar loopdecvar
   15           | /* empty */

   16 loopstmts: stmt loopstmts
   17          | /* empty */

   18 stmt: declaracao ENDEXPRESSION
   19     | IF OPENPAR exp CLOSEPAR bloco
   20     | IF OPENPAR exp CLOSEPAR ELSE bloco
   21     | WHILE OPENPAR exp CLOSEPAR bloco
   22     | RETURN loopexp ENDEXPRESSION
   23     | BREAK ENDEXPRESSION
   24     | CONTINUE ENDEXPRESSION

   25 declaracao: assign
   26           | funccall

   27 loopexp: exp
   28        | /* empty */

   29 assign: IDENTIFIER ASSIGN exp

   30 funccall: IDENTIFIER OPENPAR arglist CLOSEPAR
   31         | IDENTIFIER OPENPAR CLOSEPAR

   32 arglist: exp loopargs

   33 loopargs: SEPARADOR exp loopargs
   34         | /* empty */

   35 exp: exp PLUS exp
   36    | exp MINUS exp
   37    | exp MULT exp
   38    | exp DIV exp
   39    | exp LESS exp
   40    | exp LESSEQUAL exp
   41    | exp GREAT exp
   42    | exp GREATEQUAL exp
   43    | exp EQUAL exp
   44    | exp DIFF exp
   45    | exp AND exp
   46    | exp OR exp
   47    | MINUS exp
   48    | NOT exp
   49    | OPENPAR exp CLOSEPAR
   50    | funccall
   51    | DEC
   52    | IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
DEC (258) 51
DEF (259) 8
RETURN (260) 22
LET (261) 5
IF (262) 19 20
ELSE (263) 20
WHILE (264) 21
ASSIGN (265) 6 29
CONTINUE (266) 24
BREAK (267) 23
OPENPAR (268) 8 19 20 21 30 31 49
CLOSEPAR (269) 8 19 20 21 30 31 49
OPENBLOCK (270) 13
CLOSEBLOCK (271) 13
ENDEXPRESSION (272) 5 18 22 23 24
SEPARADOR (273) 11 33
IDENTIFIER (274) 5 8 9 11 29 30 31 52
OR (275) 46
AND (276) 45
EQUAL (277) 43
DIFF (278) 44
LESS (279) 39
LESSEQUAL (280) 40
GREATEQUAL (281) 42
GREAT (282) 41
PLUS (283) 35
MINUS (284) 36 47
MULT (285) 37
DIV (286) 38
NOT (287) 48
UMINUS (288)


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
programa (35)
    on left: 1, on right: 0
inicio (36)
    on left: 2 3 4, on right: 1 2 3
decvar (37)
    on left: 5, on right: 2 14
loopatrib (38)
    on left: 6 7, on right: 5
decfunc (39)
    on left: 8, on right: 3
paramlist (40)
    on left: 9 10, on right: 8
looparams (41)
    on left: 11 12, on right: 9 11
bloco (42)
    on left: 13, on right: 8 19 20 21
loopdecvar (43)
    on left: 14 15, on right: 13 14
loopstmts (44)
    on left: 16 17, on right: 13 16
stmt (45)
    on left: 18 19 20 21 22 23 24, on right: 16
declaracao (46)
    on left: 25 26, on right: 18
loopexp (47)
    on left: 27 28, on right: 22
assign (48)
    on left: 29, on right: 25
funccall (49)
    on left: 30 31, on right: 26 50
arglist (50)
    on left: 32, on right: 30
loopargs (51)
    on left: 33 34, on right: 32 33
exp (52)
    on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52,
    on right: 6 19 20 21 27 29 32 33 35 36 37 38 39 40 41 42 43 44
    45 46 47 48 49


state 0

    0 $accept: . programa $end

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    programa  go to state 3
    inicio    go to state 4
    decvar    go to state 5
    decfunc   go to state 6


state 1

    8 decfunc: DEF . IDENTIFIER OPENPAR paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 7


state 2

    5 decvar: LET . IDENTIFIER loopatrib ENDEXPRESSION

    IDENTIFIER  shift, and go to state 8


state 3

    0 $accept: programa . $end

    $end  shift, and go to state 9


state 4

    1 programa: inicio .

    $default  reduce using rule 1 (programa)


state 5

    2 inicio: decvar . inicio

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    inicio   go to state 10
    decvar   go to state 5
    decfunc  go to state 6


state 6

    3 inicio: decfunc . inicio

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    inicio   go to state 11
    decvar   go to state 5
    decfunc  go to state 6


state 7

    8 decfunc: DEF IDENTIFIER . OPENPAR paramlist CLOSEPAR bloco

    OPENPAR  shift, and go to state 12


state 8

    5 decvar: LET IDENTIFIER . loopatrib ENDEXPRESSION

    ASSIGN  shift, and go to state 13

    $default  reduce using rule 7 (loopatrib)

    loopatrib  go to state 14


state 9

    0 $accept: programa $end .

    $default  accept


state 10

    2 inicio: decvar inicio .

    $default  reduce using rule 2 (inicio)


state 11

    3 inicio: decfunc inicio .

    $default  reduce using rule 3 (inicio)


state 12

    8 decfunc: DEF IDENTIFIER OPENPAR . paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 15

    $default  reduce using rule 10 (paramlist)

    paramlist  go to state 16


state 13

    6 loopatrib: ASSIGN . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 23


state 14

    5 decvar: LET IDENTIFIER loopatrib . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 24


state 15

    9 paramlist: IDENTIFIER . looparams

    SEPARADOR  shift, and go to state 25

    $default  reduce using rule 12 (looparams)

    looparams  go to state 26


state 16

    8 decfunc: DEF IDENTIFIER OPENPAR paramlist . CLOSEPAR bloco

    CLOSEPAR  shift, and go to state 27


state 17

   51 exp: DEC .

    $default  reduce using rule 51 (exp)


state 18

   49 exp: OPENPAR . exp CLOSEPAR

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 28


state 19

   30 funccall: IDENTIFIER . OPENPAR arglist CLOSEPAR
   31         | IDENTIFIER . OPENPAR CLOSEPAR
   52 exp: IDENTIFIER .

    OPENPAR  shift, and go to state 29

    $default  reduce using rule 52 (exp)


state 20

   47 exp: MINUS . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 30


state 21

   48 exp: NOT . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 31


state 22

   50 exp: funccall .

    $default  reduce using rule 50 (exp)


state 23

    6 loopatrib: ASSIGN exp .
   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 6 (loopatrib)


state 24

    5 decvar: LET IDENTIFIER loopatrib ENDEXPRESSION .

    $default  reduce using rule 5 (decvar)


state 25

   11 looparams: SEPARADOR . IDENTIFIER looparams

    IDENTIFIER  shift, and go to state 44


state 26

    9 paramlist: IDENTIFIER looparams .

    $default  reduce using rule 9 (paramlist)


state 27

    8 decfunc: DEF IDENTIFIER OPENPAR paramlist CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 45

    bloco  go to state 46


state 28

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp
   49    | OPENPAR exp . CLOSEPAR

    CLOSEPAR    shift, and go to state 47
    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43


state 29

   30 funccall: IDENTIFIER OPENPAR . arglist CLOSEPAR
   31         | IDENTIFIER OPENPAR . CLOSEPAR

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    CLOSEPAR    shift, and go to state 48
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    arglist   go to state 49
    exp       go to state 50


state 30

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | MINUS exp .

    $default  reduce using rule 47 (exp)


state 31

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp
   48    | NOT exp .

    $default  reduce using rule 48 (exp)


state 32

   46 exp: exp OR . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 51


state 33

   45 exp: exp AND . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 52


state 34

   43 exp: exp EQUAL . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 53


state 35

   44 exp: exp DIFF . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 54


state 36

   39 exp: exp LESS . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 55


state 37

   40 exp: exp LESSEQUAL . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 56


state 38

   42 exp: exp GREATEQUAL . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 57


state 39

   41 exp: exp GREAT . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 58


state 40

   35 exp: exp PLUS . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 59


state 41

   36 exp: exp MINUS . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 60


state 42

   37 exp: exp MULT . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 61


state 43

   38 exp: exp DIV . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 62


state 44

   11 looparams: SEPARADOR IDENTIFIER . looparams

    SEPARADOR  shift, and go to state 25

    $default  reduce using rule 12 (looparams)

    looparams  go to state 63


state 45

   13 bloco: OPENBLOCK . loopdecvar loopstmts CLOSEBLOCK

    LET  shift, and go to state 2

    $default  reduce using rule 15 (loopdecvar)

    decvar      go to state 64
    loopdecvar  go to state 65


state 46

    8 decfunc: DEF IDENTIFIER OPENPAR paramlist CLOSEPAR bloco .

    $default  reduce using rule 8 (decfunc)


state 47

   49 exp: OPENPAR exp CLOSEPAR .

    $default  reduce using rule 49 (exp)


state 48

   31 funccall: IDENTIFIER OPENPAR CLOSEPAR .

    $default  reduce using rule 31 (funccall)


state 49

   30 funccall: IDENTIFIER OPENPAR arglist . CLOSEPAR

    CLOSEPAR  shift, and go to state 66


state 50

   32 arglist: exp . loopargs
   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    SEPARADOR   shift, and go to state 67
    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 34 (loopargs)

    loopargs  go to state 68


state 51

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp
   46    | exp OR exp .

    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 46 (exp)


state 52

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   45    | exp AND exp .
   46    | exp . OR exp

    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 45 (exp)


state 53

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   43    | exp EQUAL exp .
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 43 (exp)


state 54

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   44    | exp DIFF exp .
   45    | exp . AND exp
   46    | exp . OR exp

    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 44 (exp)


state 55

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   39    | exp LESS exp .
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    $default  reduce using rule 39 (exp)


state 56

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   40    | exp LESSEQUAL exp .
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    $default  reduce using rule 40 (exp)


state 57

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   42    | exp GREATEQUAL exp .
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    $default  reduce using rule 42 (exp)


state 58

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   41    | exp GREAT exp .
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    $default  reduce using rule 41 (exp)


state 59

   35 exp: exp . PLUS exp
   35    | exp PLUS exp .
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    MULT  shift, and go to state 42
    DIV   shift, and go to state 43

    $default  reduce using rule 35 (exp)


state 60

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   36    | exp MINUS exp .
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    MULT  shift, and go to state 42
    DIV   shift, and go to state 43

    $default  reduce using rule 36 (exp)


state 61

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   37    | exp MULT exp .
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    $default  reduce using rule 37 (exp)


state 62

   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   38    | exp DIV exp .
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    $default  reduce using rule 38 (exp)


state 63

   11 looparams: SEPARADOR IDENTIFIER looparams .

    $default  reduce using rule 11 (looparams)


state 64

   14 loopdecvar: decvar . loopdecvar

    LET  shift, and go to state 2

    $default  reduce using rule 15 (loopdecvar)

    decvar      go to state 64
    loopdecvar  go to state 69


state 65

   13 bloco: OPENBLOCK loopdecvar . loopstmts CLOSEBLOCK

    RETURN      shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    CONTINUE    shift, and go to state 73
    BREAK       shift, and go to state 74
    IDENTIFIER  shift, and go to state 75

    $default  reduce using rule 17 (loopstmts)

    loopstmts   go to state 76
    stmt        go to state 77
    declaracao  go to state 78
    assign      go to state 79
    funccall    go to state 80


state 66

   30 funccall: IDENTIFIER OPENPAR arglist CLOSEPAR .

    $default  reduce using rule 30 (funccall)


state 67

   33 loopargs: SEPARADOR . exp loopargs

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 81


state 68

   32 arglist: exp loopargs .

    $default  reduce using rule 32 (arglist)


state 69

   14 loopdecvar: decvar loopdecvar .

    $default  reduce using rule 14 (loopdecvar)


state 70

   22 stmt: RETURN . loopexp ENDEXPRESSION

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    $default  reduce using rule 28 (loopexp)

    loopexp   go to state 82
    funccall  go to state 22
    exp       go to state 83


state 71

   19 stmt: IF . OPENPAR exp CLOSEPAR bloco
   20     | IF . OPENPAR exp CLOSEPAR ELSE bloco

    OPENPAR  shift, and go to state 84


state 72

   21 stmt: WHILE . OPENPAR exp CLOSEPAR bloco

    OPENPAR  shift, and go to state 85


state 73

   24 stmt: CONTINUE . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 86


state 74

   23 stmt: BREAK . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 87


state 75

   29 assign: IDENTIFIER . ASSIGN exp
   30 funccall: IDENTIFIER . OPENPAR arglist CLOSEPAR
   31         | IDENTIFIER . OPENPAR CLOSEPAR

    ASSIGN   shift, and go to state 88
    OPENPAR  shift, and go to state 29


state 76

   13 bloco: OPENBLOCK loopdecvar loopstmts . CLOSEBLOCK

    CLOSEBLOCK  shift, and go to state 89


state 77

   16 loopstmts: stmt . loopstmts

    RETURN      shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    CONTINUE    shift, and go to state 73
    BREAK       shift, and go to state 74
    IDENTIFIER  shift, and go to state 75

    $default  reduce using rule 17 (loopstmts)

    loopstmts   go to state 90
    stmt        go to state 77
    declaracao  go to state 78
    assign      go to state 79
    funccall    go to state 80


state 78

   18 stmt: declaracao . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 91


state 79

   25 declaracao: assign .

    $default  reduce using rule 25 (declaracao)


state 80

   26 declaracao: funccall .

    $default  reduce using rule 26 (declaracao)


state 81

   33 loopargs: SEPARADOR exp . loopargs
   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    SEPARADOR   shift, and go to state 67
    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 34 (loopargs)

    loopargs  go to state 92


state 82

   22 stmt: RETURN loopexp . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 93


state 83

   27 loopexp: exp .
   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 27 (loopexp)


state 84

   19 stmt: IF OPENPAR . exp CLOSEPAR bloco
   20     | IF OPENPAR . exp CLOSEPAR ELSE bloco

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 94


state 85

   21 stmt: WHILE OPENPAR . exp CLOSEPAR bloco

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 95


state 86

   24 stmt: CONTINUE ENDEXPRESSION .

    $default  reduce using rule 24 (stmt)


state 87

   23 stmt: BREAK ENDEXPRESSION .

    $default  reduce using rule 23 (stmt)


state 88

   29 assign: IDENTIFIER ASSIGN . exp

    DEC         shift, and go to state 17
    OPENPAR     shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    MINUS       shift, and go to state 20
    NOT         shift, and go to state 21

    funccall  go to state 22
    exp       go to state 96


state 89

   13 bloco: OPENBLOCK loopdecvar loopstmts CLOSEBLOCK .

    $default  reduce using rule 13 (bloco)


state 90

   16 loopstmts: stmt loopstmts .

    $default  reduce using rule 16 (loopstmts)


state 91

   18 stmt: declaracao ENDEXPRESSION .

    $default  reduce using rule 18 (stmt)


state 92

   33 loopargs: SEPARADOR exp loopargs .

    $default  reduce using rule 33 (loopargs)


state 93

   22 stmt: RETURN loopexp ENDEXPRESSION .

    $default  reduce using rule 22 (stmt)


state 94

   19 stmt: IF OPENPAR exp . CLOSEPAR bloco
   20     | IF OPENPAR exp . CLOSEPAR ELSE bloco
   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    CLOSEPAR    shift, and go to state 97
    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43


state 95

   21 stmt: WHILE OPENPAR exp . CLOSEPAR bloco
   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    CLOSEPAR    shift, and go to state 98
    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43


state 96

   29 assign: IDENTIFIER ASSIGN exp .
   35 exp: exp . PLUS exp
   36    | exp . MINUS exp
   37    | exp . MULT exp
   38    | exp . DIV exp
   39    | exp . LESS exp
   40    | exp . LESSEQUAL exp
   41    | exp . GREAT exp
   42    | exp . GREATEQUAL exp
   43    | exp . EQUAL exp
   44    | exp . DIFF exp
   45    | exp . AND exp
   46    | exp . OR exp

    OR          shift, and go to state 32
    AND         shift, and go to state 33
    EQUAL       shift, and go to state 34
    DIFF        shift, and go to state 35
    LESS        shift, and go to state 36
    LESSEQUAL   shift, and go to state 37
    GREATEQUAL  shift, and go to state 38
    GREAT       shift, and go to state 39
    PLUS        shift, and go to state 40
    MINUS       shift, and go to state 41
    MULT        shift, and go to state 42
    DIV         shift, and go to state 43

    $default  reduce using rule 29 (assign)


state 97

   19 stmt: IF OPENPAR exp CLOSEPAR . bloco
   20     | IF OPENPAR exp CLOSEPAR . ELSE bloco

    ELSE       shift, and go to state 99
    OPENBLOCK  shift, and go to state 45

    bloco  go to state 100


state 98

   21 stmt: WHILE OPENPAR exp CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 45

    bloco  go to state 101


state 99

   20 stmt: IF OPENPAR exp CLOSEPAR ELSE . bloco

    OPENBLOCK  shift, and go to state 45

    bloco  go to state 102


state 100

   19 stmt: IF OPENPAR exp CLOSEPAR bloco .

    $default  reduce using rule 19 (stmt)


state 101

   21 stmt: WHILE OPENPAR exp CLOSEPAR bloco .

    $default  reduce using rule 21 (stmt)


state 102

   20 stmt: IF OPENPAR exp CLOSEPAR ELSE bloco .

    $default  reduce using rule 20 (stmt)
