Grammar

    0 $accept: programa $end

    1 programa: inicio

    2 inicio: decvar inicio
    3       | decfunc inicio
    4       | %empty

    5 decvar: LET IDENTIFIER loopatrib ENDEXPRESSION

    6 loopatrib: ASSIGN exp
    7          | %empty

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist CLOSEPAR bloco
    9        | DEF IDENTIFIER OPENPAR paramlist CLOSEPAR bloco

   10 paramlist: IDENTIFIER looparams
   11          | %empty

   12 looparams: SEPARADOR IDENTIFIER looparams
   13          | %empty

   14 bloco: OPENBLOCK loopdecvar loopstmts CLOSEBLOCK

   15 loopdecvar: decvar loopdecvar
   16           | %empty

   17 loopstmts: stmt loopstmts
   18          | %empty

   19 stmt: declaracao ENDEXPRESSION
   20     | IF OPENPAR exp CLOSEPAR bloco
   21     | IF OPENPAR exp CLOSEPAR ELSE bloco
   22     | WHILE OPENPAR exp CLOSEPAR bloco
   23     | RETURN loopexp ENDEXPRESSION
   24     | BREAK ENDEXPRESSION
   25     | CONTINUE ENDEXPRESSION

   26 declaracao: assign
   27           | funccall

   28 loopexp: exp
   29        | %empty

   30 assign: IDENTIFIER ASSIGN exp

   31 funccall: IDENTIFIER OPENPAR arglist CLOSEPAR
   32         | IDENTIFIER OPENPAR CLOSEPAR

   33 arglist: exp loopargs

   34 loopargs: SEPARADOR exp loopargs
   35         | %empty

   36 exp: exp PLUS exp
   37    | exp MINUS exp
   38    | exp MULT exp
   39    | exp DIV exp
   40    | exp LESS exp
   41    | exp LESSEQUAL exp
   42    | exp GREAT exp
   43    | exp GREATEQUAL exp
   44    | exp EQUAL exp
   45    | exp DIFF exp
   46    | exp AND exp
   47    | exp OR exp
   48    | MINUS exp
   49    | NOT exp
   50    | OPENPAR exp CLOSEPAR
   51    | funccall
   52    | DEC
   53    | IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
DEC (258) 52
DEF (259) 8 9
RETURN (260) 23
LET (261) 5
IF (262) 20 21
ELSE (263) 21
WHILE (264) 22
ASSIGN (265) 6 30
CONTINUE (266) 25
BREAK (267) 24
OPENPAR (268) 8 9 20 21 22 31 32 50
CLOSEPAR (269) 8 9 20 21 22 31 32 50
OPENBLOCK (270) 14
CLOSEBLOCK (271) 14
ENDEXPRESSION (272) 5 19 23 24 25
SEPARADOR (273) 12 34
IDENTIFIER (274) 5 9 10 12 30 31 32 53
PRINTAOLA (275) 8
OR (276) 47
AND (277) 46
EQUAL (278) 44
DIFF (279) 45
LESS (280) 40
LESSEQUAL (281) 41
GREATEQUAL (282) 43
GREAT (283) 42
PLUS (284) 36
MINUS (285) 37 48
MULT (286) 38
DIV (287) 39
NOT (288) 49
UMINUS (289)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
programa (36)
    on left: 1, on right: 0
inicio (37)
    on left: 2 3 4, on right: 1 2 3
decvar (38)
    on left: 5, on right: 2 15
loopatrib (39)
    on left: 6 7, on right: 5
decfunc (40)
    on left: 8 9, on right: 3
paramlist (41)
    on left: 10 11, on right: 8 9
looparams (42)
    on left: 12 13, on right: 10 12
bloco (43)
    on left: 14, on right: 8 9 20 21 22
loopdecvar (44)
    on left: 15 16, on right: 14 15
loopstmts (45)
    on left: 17 18, on right: 14 17
stmt (46)
    on left: 19 20 21 22 23 24 25, on right: 17
declaracao (47)
    on left: 26 27, on right: 19
loopexp (48)
    on left: 28 29, on right: 23
assign (49)
    on left: 30, on right: 26
funccall (50)
    on left: 31 32, on right: 27 51
arglist (51)
    on left: 33, on right: 31
loopargs (52)
    on left: 34 35, on right: 33 34
exp (53)
    on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53,
    on right: 6 20 21 22 28 30 33 34 36 37 38 39 40 41 42 43 44 45
    46 47 48 49 50


State 0

    0 $accept: . programa $end

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    programa  go to state 3
    inicio    go to state 4
    decvar    go to state 5
    decfunc   go to state 6


State 1

    8 decfunc: DEF . PRINTAOLA OPENPAR paramlist CLOSEPAR bloco
    9        | DEF . IDENTIFIER OPENPAR paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 7
    PRINTAOLA   shift, and go to state 8


State 2

    5 decvar: LET . IDENTIFIER loopatrib ENDEXPRESSION

    IDENTIFIER  shift, and go to state 9


State 3

    0 $accept: programa . $end

    $end  shift, and go to state 10


State 4

    1 programa: inicio .

    $default  reduce using rule 1 (programa)


State 5

    2 inicio: decvar . inicio

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    inicio   go to state 11
    decvar   go to state 5
    decfunc  go to state 6


State 6

    3 inicio: decfunc . inicio

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    inicio   go to state 12
    decvar   go to state 5
    decfunc  go to state 6


State 7

    9 decfunc: DEF IDENTIFIER . OPENPAR paramlist CLOSEPAR bloco

    OPENPAR  shift, and go to state 13


State 8

    8 decfunc: DEF PRINTAOLA . OPENPAR paramlist CLOSEPAR bloco

    OPENPAR  shift, and go to state 14


State 9

    5 decvar: LET IDENTIFIER . loopatrib ENDEXPRESSION

    ASSIGN  shift, and go to state 15

    $default  reduce using rule 7 (loopatrib)

    loopatrib  go to state 16


State 10

    0 $accept: programa $end .

    $default  accept


State 11

    2 inicio: decvar inicio .

    $default  reduce using rule 2 (inicio)


State 12

    3 inicio: decfunc inicio .

    $default  reduce using rule 3 (inicio)


State 13

    9 decfunc: DEF IDENTIFIER OPENPAR . paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 17

    $default  reduce using rule 11 (paramlist)

    paramlist  go to state 18


State 14

    8 decfunc: DEF PRINTAOLA OPENPAR . paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 17

    $default  reduce using rule 11 (paramlist)

    paramlist  go to state 19


State 15

    6 loopatrib: ASSIGN . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 26


State 16

    5 decvar: LET IDENTIFIER loopatrib . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 27


State 17

   10 paramlist: IDENTIFIER . looparams

    SEPARADOR  shift, and go to state 28

    $default  reduce using rule 13 (looparams)

    looparams  go to state 29


State 18

    9 decfunc: DEF IDENTIFIER OPENPAR paramlist . CLOSEPAR bloco

    CLOSEPAR  shift, and go to state 30


State 19

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist . CLOSEPAR bloco

    CLOSEPAR  shift, and go to state 31


State 20

   52 exp: DEC .

    $default  reduce using rule 52 (exp)


State 21

   50 exp: OPENPAR . exp CLOSEPAR

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 32


State 22

   31 funccall: IDENTIFIER . OPENPAR arglist CLOSEPAR
   32         | IDENTIFIER . OPENPAR CLOSEPAR
   53 exp: IDENTIFIER .

    OPENPAR  shift, and go to state 33

    $default  reduce using rule 53 (exp)


State 23

   48 exp: MINUS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 34


State 24

   49 exp: NOT . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 35


State 25

   51 exp: funccall .

    $default  reduce using rule 51 (exp)


State 26

    6 loopatrib: ASSIGN exp .
   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 6 (loopatrib)


State 27

    5 decvar: LET IDENTIFIER loopatrib ENDEXPRESSION .

    $default  reduce using rule 5 (decvar)


State 28

   12 looparams: SEPARADOR . IDENTIFIER looparams

    IDENTIFIER  shift, and go to state 48


State 29

   10 paramlist: IDENTIFIER looparams .

    $default  reduce using rule 10 (paramlist)


State 30

    9 decfunc: DEF IDENTIFIER OPENPAR paramlist CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 49

    bloco  go to state 50


State 31

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 49

    bloco  go to state 51


State 32

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp
   50    | OPENPAR exp . CLOSEPAR

    CLOSEPAR    shift, and go to state 52
    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47


State 33

   31 funccall: IDENTIFIER OPENPAR . arglist CLOSEPAR
   32         | IDENTIFIER OPENPAR . CLOSEPAR

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    CLOSEPAR    shift, and go to state 53
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    arglist   go to state 54
    exp       go to state 55


State 34

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp
   48    | MINUS exp .

    $default  reduce using rule 48 (exp)


State 35

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp
   49    | NOT exp .

    $default  reduce using rule 49 (exp)


State 36

   47 exp: exp OR . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 56


State 37

   46 exp: exp AND . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 57


State 38

   44 exp: exp EQUAL . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 58


State 39

   45 exp: exp DIFF . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 59


State 40

   40 exp: exp LESS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 60


State 41

   41 exp: exp LESSEQUAL . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 61


State 42

   43 exp: exp GREATEQUAL . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 62


State 43

   42 exp: exp GREAT . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 63


State 44

   36 exp: exp PLUS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 64


State 45

   37 exp: exp MINUS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 65


State 46

   38 exp: exp MULT . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 66


State 47

   39 exp: exp DIV . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 67


State 48

   12 looparams: SEPARADOR IDENTIFIER . looparams

    SEPARADOR  shift, and go to state 28

    $default  reduce using rule 13 (looparams)

    looparams  go to state 68


State 49

   14 bloco: OPENBLOCK . loopdecvar loopstmts CLOSEBLOCK

    LET  shift, and go to state 2

    $default  reduce using rule 16 (loopdecvar)

    decvar      go to state 69
    loopdecvar  go to state 70


State 50

    9 decfunc: DEF IDENTIFIER OPENPAR paramlist CLOSEPAR bloco .

    $default  reduce using rule 9 (decfunc)


State 51

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist CLOSEPAR bloco .

    $default  reduce using rule 8 (decfunc)


State 52

   50 exp: OPENPAR exp CLOSEPAR .

    $default  reduce using rule 50 (exp)


State 53

   32 funccall: IDENTIFIER OPENPAR CLOSEPAR .

    $default  reduce using rule 32 (funccall)


State 54

   31 funccall: IDENTIFIER OPENPAR arglist . CLOSEPAR

    CLOSEPAR  shift, and go to state 71


State 55

   33 arglist: exp . loopargs
   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    SEPARADOR   shift, and go to state 72
    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 35 (loopargs)

    loopargs  go to state 73


State 56

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp
   47    | exp OR exp .

    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 47 (exp)


State 57

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   46    | exp AND exp .
   47    | exp . OR exp

    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 46 (exp)


State 58

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   44    | exp EQUAL exp .
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 44 (exp)


State 59

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   45    | exp DIFF exp .
   46    | exp . AND exp
   47    | exp . OR exp

    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 45 (exp)


State 60

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   40    | exp LESS exp .
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MULT   shift, and go to state 46
    DIV    shift, and go to state 47

    $default  reduce using rule 40 (exp)


State 61

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   41    | exp LESSEQUAL exp .
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MULT   shift, and go to state 46
    DIV    shift, and go to state 47

    $default  reduce using rule 41 (exp)


State 62

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   43    | exp GREATEQUAL exp .
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MULT   shift, and go to state 46
    DIV    shift, and go to state 47

    $default  reduce using rule 43 (exp)


State 63

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   42    | exp GREAT exp .
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    MULT   shift, and go to state 46
    DIV    shift, and go to state 47

    $default  reduce using rule 42 (exp)


State 64

   36 exp: exp . PLUS exp
   36    | exp PLUS exp .
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    MULT  shift, and go to state 46
    DIV   shift, and go to state 47

    $default  reduce using rule 36 (exp)


State 65

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   37    | exp MINUS exp .
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    MULT  shift, and go to state 46
    DIV   shift, and go to state 47

    $default  reduce using rule 37 (exp)


State 66

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   38    | exp MULT exp .
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    $default  reduce using rule 38 (exp)


State 67

   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   39    | exp DIV exp .
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    $default  reduce using rule 39 (exp)


State 68

   12 looparams: SEPARADOR IDENTIFIER looparams .

    $default  reduce using rule 12 (looparams)


State 69

   15 loopdecvar: decvar . loopdecvar

    LET  shift, and go to state 2

    $default  reduce using rule 16 (loopdecvar)

    decvar      go to state 69
    loopdecvar  go to state 74


State 70

   14 bloco: OPENBLOCK loopdecvar . loopstmts CLOSEBLOCK

    RETURN      shift, and go to state 75
    IF          shift, and go to state 76
    WHILE       shift, and go to state 77
    CONTINUE    shift, and go to state 78
    BREAK       shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    $default  reduce using rule 18 (loopstmts)

    loopstmts   go to state 81
    stmt        go to state 82
    declaracao  go to state 83
    assign      go to state 84
    funccall    go to state 85


State 71

   31 funccall: IDENTIFIER OPENPAR arglist CLOSEPAR .

    $default  reduce using rule 31 (funccall)


State 72

   34 loopargs: SEPARADOR . exp loopargs

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 86


State 73

   33 arglist: exp loopargs .

    $default  reduce using rule 33 (arglist)


State 74

   15 loopdecvar: decvar loopdecvar .

    $default  reduce using rule 15 (loopdecvar)


State 75

   23 stmt: RETURN . loopexp ENDEXPRESSION

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    $default  reduce using rule 29 (loopexp)

    loopexp   go to state 87
    funccall  go to state 25
    exp       go to state 88


State 76

   20 stmt: IF . OPENPAR exp CLOSEPAR bloco
   21     | IF . OPENPAR exp CLOSEPAR ELSE bloco

    OPENPAR  shift, and go to state 89


State 77

   22 stmt: WHILE . OPENPAR exp CLOSEPAR bloco

    OPENPAR  shift, and go to state 90


State 78

   25 stmt: CONTINUE . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 91


State 79

   24 stmt: BREAK . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 92


State 80

   30 assign: IDENTIFIER . ASSIGN exp
   31 funccall: IDENTIFIER . OPENPAR arglist CLOSEPAR
   32         | IDENTIFIER . OPENPAR CLOSEPAR

    ASSIGN   shift, and go to state 93
    OPENPAR  shift, and go to state 33


State 81

   14 bloco: OPENBLOCK loopdecvar loopstmts . CLOSEBLOCK

    CLOSEBLOCK  shift, and go to state 94


State 82

   17 loopstmts: stmt . loopstmts

    RETURN      shift, and go to state 75
    IF          shift, and go to state 76
    WHILE       shift, and go to state 77
    CONTINUE    shift, and go to state 78
    BREAK       shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    $default  reduce using rule 18 (loopstmts)

    loopstmts   go to state 95
    stmt        go to state 82
    declaracao  go to state 83
    assign      go to state 84
    funccall    go to state 85


State 83

   19 stmt: declaracao . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 96


State 84

   26 declaracao: assign .

    $default  reduce using rule 26 (declaracao)


State 85

   27 declaracao: funccall .

    $default  reduce using rule 27 (declaracao)


State 86

   34 loopargs: SEPARADOR exp . loopargs
   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    SEPARADOR   shift, and go to state 72
    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 35 (loopargs)

    loopargs  go to state 97


State 87

   23 stmt: RETURN loopexp . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 98


State 88

   28 loopexp: exp .
   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 28 (loopexp)


State 89

   20 stmt: IF OPENPAR . exp CLOSEPAR bloco
   21     | IF OPENPAR . exp CLOSEPAR ELSE bloco

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 99


State 90

   22 stmt: WHILE OPENPAR . exp CLOSEPAR bloco

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 100


State 91

   25 stmt: CONTINUE ENDEXPRESSION .

    $default  reduce using rule 25 (stmt)


State 92

   24 stmt: BREAK ENDEXPRESSION .

    $default  reduce using rule 24 (stmt)


State 93

   30 assign: IDENTIFIER ASSIGN . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    MINUS       shift, and go to state 23
    NOT         shift, and go to state 24

    funccall  go to state 25
    exp       go to state 101


State 94

   14 bloco: OPENBLOCK loopdecvar loopstmts CLOSEBLOCK .

    $default  reduce using rule 14 (bloco)


State 95

   17 loopstmts: stmt loopstmts .

    $default  reduce using rule 17 (loopstmts)


State 96

   19 stmt: declaracao ENDEXPRESSION .

    $default  reduce using rule 19 (stmt)


State 97

   34 loopargs: SEPARADOR exp loopargs .

    $default  reduce using rule 34 (loopargs)


State 98

   23 stmt: RETURN loopexp ENDEXPRESSION .

    $default  reduce using rule 23 (stmt)


State 99

   20 stmt: IF OPENPAR exp . CLOSEPAR bloco
   21     | IF OPENPAR exp . CLOSEPAR ELSE bloco
   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    CLOSEPAR    shift, and go to state 102
    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47


State 100

   22 stmt: WHILE OPENPAR exp . CLOSEPAR bloco
   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    CLOSEPAR    shift, and go to state 103
    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47


State 101

   30 assign: IDENTIFIER ASSIGN exp .
   36 exp: exp . PLUS exp
   37    | exp . MINUS exp
   38    | exp . MULT exp
   39    | exp . DIV exp
   40    | exp . LESS exp
   41    | exp . LESSEQUAL exp
   42    | exp . GREAT exp
   43    | exp . GREATEQUAL exp
   44    | exp . EQUAL exp
   45    | exp . DIFF exp
   46    | exp . AND exp
   47    | exp . OR exp

    OR          shift, and go to state 36
    AND         shift, and go to state 37
    EQUAL       shift, and go to state 38
    DIFF        shift, and go to state 39
    LESS        shift, and go to state 40
    LESSEQUAL   shift, and go to state 41
    GREATEQUAL  shift, and go to state 42
    GREAT       shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    MULT        shift, and go to state 46
    DIV         shift, and go to state 47

    $default  reduce using rule 30 (assign)


State 102

   20 stmt: IF OPENPAR exp CLOSEPAR . bloco
   21     | IF OPENPAR exp CLOSEPAR . ELSE bloco

    ELSE       shift, and go to state 104
    OPENBLOCK  shift, and go to state 49

    bloco  go to state 105


State 103

   22 stmt: WHILE OPENPAR exp CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 49

    bloco  go to state 106


State 104

   21 stmt: IF OPENPAR exp CLOSEPAR ELSE . bloco

    OPENBLOCK  shift, and go to state 49

    bloco  go to state 107


State 105

   20 stmt: IF OPENPAR exp CLOSEPAR bloco .

    $default  reduce using rule 20 (stmt)


State 106

   22 stmt: WHILE OPENPAR exp CLOSEPAR bloco .

    $default  reduce using rule 22 (stmt)


State 107

   21 stmt: IF OPENPAR exp CLOSEPAR ELSE bloco .

    $default  reduce using rule 21 (stmt)
