Grammar

    0 $accept: programa $end

    1 programa: inicio

    2 inicio: decvar inicio
    3       | decfunc inicio
    4       | /* empty */

    5 decvar: LET IDENTIFIER loopatrib ENDEXPRESSION

    6 loopatrib: ASSIGN exp
    7          | /* empty */

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist CLOSEPAR bloco
    9        | DEF IDENTIFIER OPENPAR paramlist CLOSEPAR bloco

   10 paramlist: IDENTIFIER looparams
   11          | /* empty */

   12 looparams: SEPARADOR IDENTIFIER looparams
   13          | /* empty */

   14 bloco: OPENBLOCK loopdecvar loopstmts CLOSEBLOCK

   15 loopdecvar: decvar loopdecvar
   16           | /* empty */

   17 loopstmts: stmt loopstmts
   18          | /* empty */

   19 stmt: funccall ENDEXPRESSION
   20     | assign ENDEXPRESSION
   21     | IF OPENPAR exp CLOSEPAR bloco
   22     | IF OPENPAR exp CLOSEPAR ELSE bloco
   23     | WHILE OPENPAR exp CLOSEPAR bloco
   24     | RETURN loopexp ENDEXPRESSION
   25     | BREAK ENDEXPRESSION
   26     | CONTINUE ENDEXPRESSION

   27 loopexp: exp
   28        | /* empty */

   29 assign: IDENTIFIER ASSIGN exp

   30 funccall: IDENTIFIER OPENPAR arglist CLOSEPAR
   31         | PRINTAOLA OPENPAR arglist CLOSEPAR

   32 arglist: /* empty */
   33        | loopargs

   34 loopargs: exp loopargs2

   35 loopargs2: SEPARADOR exp loopargs2
   36          | /* empty */

   37 exp: exp PLUS exp
   38    | exp MINUS exp
   39    | exp MULT exp
   40    | exp DIV exp
   41    | exp LESS exp
   42    | exp LESSEQUAL exp
   43    | exp GREAT exp
   44    | exp GREATEQUAL exp
   45    | exp EQUAL exp
   46    | exp DIFF exp
   47    | exp AND exp
   48    | exp OR exp
   49    | MINUS exp
   50    | NOT exp
   51    | OPENPAR exp CLOSEPAR
   52    | funccall
   53    | DEC
   54    | IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
DEC (258) 53
DEF (259) 8 9
RETURN (260) 24
LET (261) 5
IF (262) 21 22
ELSE (263) 22
WHILE (264) 23
ASSIGN (265) 6 29
CONTINUE (266) 26
BREAK (267) 25
OPENPAR (268) 8 9 21 22 23 30 31 51
CLOSEPAR (269) 8 9 21 22 23 30 31 51
OPENBLOCK (270) 14
CLOSEBLOCK (271) 14
ENDEXPRESSION (272) 5 19 20 24 25 26
SEPARADOR (273) 12 35
IDENTIFIER (274) 5 9 10 12 29 30 54
PRINTAOLA (275) 8 31
OR (276) 48
AND (277) 47
EQUAL (278) 45
DIFF (279) 46
LESS (280) 41
LESSEQUAL (281) 42
GREATEQUAL (282) 44
GREAT (283) 43
PLUS (284) 37
MINUS (285) 38 49
MULT (286) 39
DIV (287) 40
NOT (288) 50
UMINUS (289)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
programa (36)
    on left: 1, on right: 0
inicio (37)
    on left: 2 3 4, on right: 1 2 3
decvar (38)
    on left: 5, on right: 2 15
loopatrib (39)
    on left: 6 7, on right: 5
decfunc (40)
    on left: 8 9, on right: 3
paramlist (41)
    on left: 10 11, on right: 8 9
looparams (42)
    on left: 12 13, on right: 10 12
bloco (43)
    on left: 14, on right: 8 9 21 22 23
loopdecvar (44)
    on left: 15 16, on right: 14 15
loopstmts (45)
    on left: 17 18, on right: 14 17
stmt (46)
    on left: 19 20 21 22 23 24 25 26, on right: 17
loopexp (47)
    on left: 27 28, on right: 24
assign (48)
    on left: 29, on right: 20
funccall (49)
    on left: 30 31, on right: 19 52
arglist (50)
    on left: 32 33, on right: 30 31
loopargs (51)
    on left: 34, on right: 33
loopargs2 (52)
    on left: 35 36, on right: 34 35
exp (53)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54,
    on right: 6 21 22 23 27 29 34 35 37 38 39 40 41 42 43 44 45 46
    47 48 49 50 51


state 0

    0 $accept: . programa $end

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    programa  go to state 3
    inicio    go to state 4
    decvar    go to state 5
    decfunc   go to state 6


state 1

    8 decfunc: DEF . PRINTAOLA OPENPAR paramlist CLOSEPAR bloco
    9        | DEF . IDENTIFIER OPENPAR paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 7
    PRINTAOLA   shift, and go to state 8


state 2

    5 decvar: LET . IDENTIFIER loopatrib ENDEXPRESSION

    IDENTIFIER  shift, and go to state 9


state 3

    0 $accept: programa . $end

    $end  shift, and go to state 10


state 4

    1 programa: inicio .

    $default  reduce using rule 1 (programa)


state 5

    2 inicio: decvar . inicio

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    inicio   go to state 11
    decvar   go to state 5
    decfunc  go to state 6


state 6

    3 inicio: decfunc . inicio

    DEF  shift, and go to state 1
    LET  shift, and go to state 2

    $default  reduce using rule 4 (inicio)

    inicio   go to state 12
    decvar   go to state 5
    decfunc  go to state 6


state 7

    9 decfunc: DEF IDENTIFIER . OPENPAR paramlist CLOSEPAR bloco

    OPENPAR  shift, and go to state 13


state 8

    8 decfunc: DEF PRINTAOLA . OPENPAR paramlist CLOSEPAR bloco

    OPENPAR  shift, and go to state 14


state 9

    5 decvar: LET IDENTIFIER . loopatrib ENDEXPRESSION

    ASSIGN  shift, and go to state 15

    $default  reduce using rule 7 (loopatrib)

    loopatrib  go to state 16


state 10

    0 $accept: programa $end .

    $default  accept


state 11

    2 inicio: decvar inicio .

    $default  reduce using rule 2 (inicio)


state 12

    3 inicio: decfunc inicio .

    $default  reduce using rule 3 (inicio)


state 13

    9 decfunc: DEF IDENTIFIER OPENPAR . paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 17

    $default  reduce using rule 11 (paramlist)

    paramlist  go to state 18


state 14

    8 decfunc: DEF PRINTAOLA OPENPAR . paramlist CLOSEPAR bloco

    IDENTIFIER  shift, and go to state 17

    $default  reduce using rule 11 (paramlist)

    paramlist  go to state 19


state 15

    6 loopatrib: ASSIGN . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 27


state 16

    5 decvar: LET IDENTIFIER loopatrib . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 28


state 17

   10 paramlist: IDENTIFIER . looparams

    SEPARADOR  shift, and go to state 29

    $default  reduce using rule 13 (looparams)

    looparams  go to state 30


state 18

    9 decfunc: DEF IDENTIFIER OPENPAR paramlist . CLOSEPAR bloco

    CLOSEPAR  shift, and go to state 31


state 19

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist . CLOSEPAR bloco

    CLOSEPAR  shift, and go to state 32


state 20

   53 exp: DEC .

    $default  reduce using rule 53 (exp)


state 21

   51 exp: OPENPAR . exp CLOSEPAR

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 33


state 22

   30 funccall: IDENTIFIER . OPENPAR arglist CLOSEPAR
   54 exp: IDENTIFIER .

    OPENPAR  shift, and go to state 34

    $default  reduce using rule 54 (exp)


state 23

   31 funccall: PRINTAOLA . OPENPAR arglist CLOSEPAR

    OPENPAR  shift, and go to state 35


state 24

   49 exp: MINUS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 36


state 25

   50 exp: NOT . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 37


state 26

   52 exp: funccall .

    $default  reduce using rule 52 (exp)


state 27

    6 loopatrib: ASSIGN exp .
   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 6 (loopatrib)


state 28

    5 decvar: LET IDENTIFIER loopatrib ENDEXPRESSION .

    $default  reduce using rule 5 (decvar)


state 29

   12 looparams: SEPARADOR . IDENTIFIER looparams

    IDENTIFIER  shift, and go to state 50


state 30

   10 paramlist: IDENTIFIER looparams .

    $default  reduce using rule 10 (paramlist)


state 31

    9 decfunc: DEF IDENTIFIER OPENPAR paramlist CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 51

    bloco  go to state 52


state 32

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 51

    bloco  go to state 53


state 33

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp
   51    | OPENPAR exp . CLOSEPAR

    CLOSEPAR    shift, and go to state 54
    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49


state 34

   30 funccall: IDENTIFIER OPENPAR . arglist CLOSEPAR

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 32 (arglist)

    funccall  go to state 26
    arglist   go to state 55
    loopargs  go to state 56
    exp       go to state 57


state 35

   31 funccall: PRINTAOLA OPENPAR . arglist CLOSEPAR

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 32 (arglist)

    funccall  go to state 26
    arglist   go to state 58
    loopargs  go to state 56
    exp       go to state 57


state 36

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp
   49    | MINUS exp .

    $default  reduce using rule 49 (exp)


state 37

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp
   50    | NOT exp .

    $default  reduce using rule 50 (exp)


state 38

   48 exp: exp OR . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 59


state 39

   47 exp: exp AND . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 60


state 40

   45 exp: exp EQUAL . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 61


state 41

   46 exp: exp DIFF . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 62


state 42

   41 exp: exp LESS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 63


state 43

   42 exp: exp LESSEQUAL . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 64


state 44

   44 exp: exp GREATEQUAL . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 65


state 45

   43 exp: exp GREAT . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 66


state 46

   37 exp: exp PLUS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 67


state 47

   38 exp: exp MINUS . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 68


state 48

   39 exp: exp MULT . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 69


state 49

   40 exp: exp DIV . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 70


state 50

   12 looparams: SEPARADOR IDENTIFIER . looparams

    SEPARADOR  shift, and go to state 29

    $default  reduce using rule 13 (looparams)

    looparams  go to state 71


state 51

   14 bloco: OPENBLOCK . loopdecvar loopstmts CLOSEBLOCK

    LET  shift, and go to state 2

    $default  reduce using rule 16 (loopdecvar)

    decvar      go to state 72
    loopdecvar  go to state 73


state 52

    9 decfunc: DEF IDENTIFIER OPENPAR paramlist CLOSEPAR bloco .

    $default  reduce using rule 9 (decfunc)


state 53

    8 decfunc: DEF PRINTAOLA OPENPAR paramlist CLOSEPAR bloco .

    $default  reduce using rule 8 (decfunc)


state 54

   51 exp: OPENPAR exp CLOSEPAR .

    $default  reduce using rule 51 (exp)


state 55

   30 funccall: IDENTIFIER OPENPAR arglist . CLOSEPAR

    CLOSEPAR  shift, and go to state 74


state 56

   33 arglist: loopargs .

    $default  reduce using rule 33 (arglist)


state 57

   34 loopargs: exp . loopargs2
   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    SEPARADOR   shift, and go to state 75
    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 36 (loopargs2)

    loopargs2  go to state 76


state 58

   31 funccall: PRINTAOLA OPENPAR arglist . CLOSEPAR

    CLOSEPAR  shift, and go to state 77


state 59

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp
   48    | exp OR exp .

    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 48 (exp)


state 60

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   47    | exp AND exp .
   48    | exp . OR exp

    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 47 (exp)


state 61

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   45    | exp EQUAL exp .
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 45 (exp)


state 62

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   46    | exp DIFF exp .
   47    | exp . AND exp
   48    | exp . OR exp

    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 46 (exp)


state 63

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   41    | exp LESS exp .
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49

    $default  reduce using rule 41 (exp)


state 64

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   42    | exp LESSEQUAL exp .
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49

    $default  reduce using rule 42 (exp)


state 65

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   44    | exp GREATEQUAL exp .
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49

    $default  reduce using rule 44 (exp)


state 66

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   43    | exp GREAT exp .
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49

    $default  reduce using rule 43 (exp)


state 67

   37 exp: exp . PLUS exp
   37    | exp PLUS exp .
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    MULT  shift, and go to state 48
    DIV   shift, and go to state 49

    $default  reduce using rule 37 (exp)


state 68

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   38    | exp MINUS exp .
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    MULT  shift, and go to state 48
    DIV   shift, and go to state 49

    $default  reduce using rule 38 (exp)


state 69

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   39    | exp MULT exp .
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    $default  reduce using rule 39 (exp)


state 70

   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   40    | exp DIV exp .
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    $default  reduce using rule 40 (exp)


state 71

   12 looparams: SEPARADOR IDENTIFIER looparams .

    $default  reduce using rule 12 (looparams)


state 72

   15 loopdecvar: decvar . loopdecvar

    LET  shift, and go to state 2

    $default  reduce using rule 16 (loopdecvar)

    decvar      go to state 72
    loopdecvar  go to state 78


state 73

   14 bloco: OPENBLOCK loopdecvar . loopstmts CLOSEBLOCK

    RETURN      shift, and go to state 79
    IF          shift, and go to state 80
    WHILE       shift, and go to state 81
    CONTINUE    shift, and go to state 82
    BREAK       shift, and go to state 83
    IDENTIFIER  shift, and go to state 84
    PRINTAOLA   shift, and go to state 23

    $default  reduce using rule 18 (loopstmts)

    loopstmts  go to state 85
    stmt       go to state 86
    assign     go to state 87
    funccall   go to state 88


state 74

   30 funccall: IDENTIFIER OPENPAR arglist CLOSEPAR .

    $default  reduce using rule 30 (funccall)


state 75

   35 loopargs2: SEPARADOR . exp loopargs2

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 89


state 76

   34 loopargs: exp loopargs2 .

    $default  reduce using rule 34 (loopargs)


state 77

   31 funccall: PRINTAOLA OPENPAR arglist CLOSEPAR .

    $default  reduce using rule 31 (funccall)


state 78

   15 loopdecvar: decvar loopdecvar .

    $default  reduce using rule 15 (loopdecvar)


state 79

   24 stmt: RETURN . loopexp ENDEXPRESSION

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    $default  reduce using rule 28 (loopexp)

    loopexp   go to state 90
    funccall  go to state 26
    exp       go to state 91


state 80

   21 stmt: IF . OPENPAR exp CLOSEPAR bloco
   22     | IF . OPENPAR exp CLOSEPAR ELSE bloco

    OPENPAR  shift, and go to state 92


state 81

   23 stmt: WHILE . OPENPAR exp CLOSEPAR bloco

    OPENPAR  shift, and go to state 93


state 82

   26 stmt: CONTINUE . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 94


state 83

   25 stmt: BREAK . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 95


state 84

   29 assign: IDENTIFIER . ASSIGN exp
   30 funccall: IDENTIFIER . OPENPAR arglist CLOSEPAR

    ASSIGN   shift, and go to state 96
    OPENPAR  shift, and go to state 34


state 85

   14 bloco: OPENBLOCK loopdecvar loopstmts . CLOSEBLOCK

    CLOSEBLOCK  shift, and go to state 97


state 86

   17 loopstmts: stmt . loopstmts

    RETURN      shift, and go to state 79
    IF          shift, and go to state 80
    WHILE       shift, and go to state 81
    CONTINUE    shift, and go to state 82
    BREAK       shift, and go to state 83
    IDENTIFIER  shift, and go to state 84
    PRINTAOLA   shift, and go to state 23

    $default  reduce using rule 18 (loopstmts)

    loopstmts  go to state 98
    stmt       go to state 86
    assign     go to state 87
    funccall   go to state 88


state 87

   20 stmt: assign . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 99


state 88

   19 stmt: funccall . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 100


state 89

   35 loopargs2: SEPARADOR exp . loopargs2
   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    SEPARADOR   shift, and go to state 75
    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 36 (loopargs2)

    loopargs2  go to state 101


state 90

   24 stmt: RETURN loopexp . ENDEXPRESSION

    ENDEXPRESSION  shift, and go to state 102


state 91

   27 loopexp: exp .
   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 27 (loopexp)


state 92

   21 stmt: IF OPENPAR . exp CLOSEPAR bloco
   22     | IF OPENPAR . exp CLOSEPAR ELSE bloco

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 103


state 93

   23 stmt: WHILE OPENPAR . exp CLOSEPAR bloco

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 104


state 94

   26 stmt: CONTINUE ENDEXPRESSION .

    $default  reduce using rule 26 (stmt)


state 95

   25 stmt: BREAK ENDEXPRESSION .

    $default  reduce using rule 25 (stmt)


state 96

   29 assign: IDENTIFIER ASSIGN . exp

    DEC         shift, and go to state 20
    OPENPAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 22
    PRINTAOLA   shift, and go to state 23
    MINUS       shift, and go to state 24
    NOT         shift, and go to state 25

    funccall  go to state 26
    exp       go to state 105


state 97

   14 bloco: OPENBLOCK loopdecvar loopstmts CLOSEBLOCK .

    $default  reduce using rule 14 (bloco)


state 98

   17 loopstmts: stmt loopstmts .

    $default  reduce using rule 17 (loopstmts)


state 99

   20 stmt: assign ENDEXPRESSION .

    $default  reduce using rule 20 (stmt)


state 100

   19 stmt: funccall ENDEXPRESSION .

    $default  reduce using rule 19 (stmt)


state 101

   35 loopargs2: SEPARADOR exp loopargs2 .

    $default  reduce using rule 35 (loopargs2)


state 102

   24 stmt: RETURN loopexp ENDEXPRESSION .

    $default  reduce using rule 24 (stmt)


state 103

   21 stmt: IF OPENPAR exp . CLOSEPAR bloco
   22     | IF OPENPAR exp . CLOSEPAR ELSE bloco
   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    CLOSEPAR    shift, and go to state 106
    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49


state 104

   23 stmt: WHILE OPENPAR exp . CLOSEPAR bloco
   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    CLOSEPAR    shift, and go to state 107
    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49


state 105

   29 assign: IDENTIFIER ASSIGN exp .
   37 exp: exp . PLUS exp
   38    | exp . MINUS exp
   39    | exp . MULT exp
   40    | exp . DIV exp
   41    | exp . LESS exp
   42    | exp . LESSEQUAL exp
   43    | exp . GREAT exp
   44    | exp . GREATEQUAL exp
   45    | exp . EQUAL exp
   46    | exp . DIFF exp
   47    | exp . AND exp
   48    | exp . OR exp

    OR          shift, and go to state 38
    AND         shift, and go to state 39
    EQUAL       shift, and go to state 40
    DIFF        shift, and go to state 41
    LESS        shift, and go to state 42
    LESSEQUAL   shift, and go to state 43
    GREATEQUAL  shift, and go to state 44
    GREAT       shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47
    MULT        shift, and go to state 48
    DIV         shift, and go to state 49

    $default  reduce using rule 29 (assign)


state 106

   21 stmt: IF OPENPAR exp CLOSEPAR . bloco
   22     | IF OPENPAR exp CLOSEPAR . ELSE bloco

    ELSE       shift, and go to state 108
    OPENBLOCK  shift, and go to state 51

    bloco  go to state 109


state 107

   23 stmt: WHILE OPENPAR exp CLOSEPAR . bloco

    OPENBLOCK  shift, and go to state 51

    bloco  go to state 110


state 108

   22 stmt: IF OPENPAR exp CLOSEPAR ELSE . bloco

    OPENBLOCK  shift, and go to state 51

    bloco  go to state 111


state 109

   21 stmt: IF OPENPAR exp CLOSEPAR bloco .

    $default  reduce using rule 21 (stmt)


state 110

   23 stmt: WHILE OPENPAR exp CLOSEPAR bloco .

    $default  reduce using rule 23 (stmt)


state 111

   22 stmt: IF OPENPAR exp CLOSEPAR ELSE bloco .

    $default  reduce using rule 22 (stmt)
